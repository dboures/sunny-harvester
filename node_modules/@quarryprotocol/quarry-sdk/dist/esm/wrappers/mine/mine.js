import { __awaiter } from "tslib";
import { getOrCreateATA } from "@saberhq/token-utils";
import { Keypair, SystemProgram, SYSVAR_CLOCK_PUBKEY } from "@solana/web3.js";
import { findRewarderAddress } from "./pda";
import { RewarderWrapper } from "./rewarder";
export class MineWrapper {
    constructor(sdk) {
        this.sdk = sdk;
    }
    get provider() {
        return this.sdk.provider;
    }
    get program() {
        return this.sdk.programs.Mine;
    }
    createRewarder({ mintWrapper, baseKP = Keypair.generate(), authority = this.program.provider.wallet.publicKey, }) {
        return __awaiter(this, void 0, void 0, function* () {
            const [rewarderKey, bump] = yield findRewarderAddress(baseKP.publicKey, this.program.programId);
            const mintWrapperDataRaw = yield this.provider.getAccountInfo(mintWrapper);
            if (!mintWrapperDataRaw) {
                throw new Error(`mint wrapper does not exist at ${mintWrapper.toString()}`);
            }
            const mintWrapperData = this.sdk.programs.MintWrapper.coder.accounts.decode("MintWrapper", mintWrapperDataRaw.accountInfo.data);
            const { address: claimFeeTokenAccount, instruction: createATAInstruction } = yield getOrCreateATA({
                provider: this.provider,
                mint: mintWrapperData.tokenMint,
                owner: rewarderKey,
            });
            return {
                key: rewarderKey,
                tx: this.sdk.newTx([
                    ...(createATAInstruction ? [createATAInstruction] : []),
                    this.program.instruction.newRewarder(bump, {
                        accounts: {
                            base: baseKP.publicKey,
                            authority,
                            rewarder: rewarderKey,
                            payer: this.program.provider.wallet.publicKey,
                            systemProgram: SystemProgram.programId,
                            unusedClock: SYSVAR_CLOCK_PUBKEY,
                            mintWrapper,
                            rewardsTokenMint: mintWrapperData.tokenMint,
                            claimFeeTokenAccount,
                        },
                    }),
                ], [baseKP]),
            };
        });
    }
    /**
     * Loads the rewarder wrapper.
     * @param rewarder
     * @returns
     */
    loadRewarderWrapper(rewarder) {
        return __awaiter(this, void 0, void 0, function* () {
            const rewarderData = yield this.program.account.rewarder.fetch(rewarder);
            return new RewarderWrapper(this, rewarder, rewarderData);
        });
    }
}
//# sourceMappingURL=mine.js.map