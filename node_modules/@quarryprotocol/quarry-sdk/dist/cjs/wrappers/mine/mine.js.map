{"version":3,"file":"mine.js","sourceRoot":"","sources":["../../../../src/wrappers/mine/mine.ts"],"names":[],"mappings":";;;;AACA,sDAAsD;AAEtD,6CAA8E;AAK9E,+BAA4C;AAC5C,yCAA6C;AAE7C,MAAa,WAAW;IACtB,YAAqB,GAAc;QAAd,QAAG,GAAH,GAAG,CAAW;IAAG,CAAC;IAEvC,IAAI,QAAQ;QACV,OAAO,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC;IAC3B,CAAC;IAED,IAAI,OAAO;QACT,OAAO,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,IAAI,CAAC;IAChC,CAAC;IAEK,cAAc,CAAC,EACnB,WAAW,EACX,MAAM,GAAG,iBAAO,CAAC,QAAQ,EAAE,EAC3B,SAAS,GAAG,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,MAAM,CAAC,SAAS,GAKnD;;YAIC,MAAM,CAAC,WAAW,EAAE,IAAI,CAAC,GAAG,MAAM,IAAA,yBAAmB,EACnD,MAAM,CAAC,SAAS,EAChB,IAAI,CAAC,OAAO,CAAC,SAAS,CACvB,CAAC;YAEF,MAAM,kBAAkB,GAAG,MAAM,IAAI,CAAC,QAAQ,CAAC,cAAc,CAAC,WAAW,CAAC,CAAC;YAC3E,IAAI,CAAC,kBAAkB,EAAE;gBACvB,MAAM,IAAI,KAAK,CACb,kCAAkC,WAAW,CAAC,QAAQ,EAAE,EAAE,CAC3D,CAAC;aACH;YAED,MAAM,eAAe,GACnB,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,WAAW,CAAC,KAAK,CAAC,QAAQ,CAAC,MAAM,CACjD,aAAa,EACb,kBAAkB,CAAC,WAAW,CAAC,IAAI,CACpC,CAAC;YAEJ,MAAM,EAAE,OAAO,EAAE,oBAAoB,EAAE,WAAW,EAAE,oBAAoB,EAAE,GACxE,MAAM,IAAA,4BAAc,EAAC;gBACnB,QAAQ,EAAE,IAAI,CAAC,QAAQ;gBACvB,IAAI,EAAE,eAAe,CAAC,SAAS;gBAC/B,KAAK,EAAE,WAAW;aACnB,CAAC,CAAC;YAEL,OAAO;gBACL,GAAG,EAAE,WAAW;gBAChB,EAAE,EAAE,IAAI,CAAC,GAAG,CAAC,KAAK,CAChB;oBACE,GAAG,CAAC,oBAAoB,CAAC,CAAC,CAAC,CAAC,oBAAoB,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;oBACvD,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC,WAAW,CAAC,IAAI,EAAE;wBACzC,QAAQ,EAAE;4BACR,IAAI,EAAE,MAAM,CAAC,SAAS;4BACtB,SAAS;4BACT,QAAQ,EAAE,WAAW;4BACrB,KAAK,EAAE,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,MAAM,CAAC,SAAS;4BAC7C,aAAa,EAAE,uBAAa,CAAC,SAAS;4BACtC,WAAW,EAAE,6BAAmB;4BAChC,WAAW;4BACX,gBAAgB,EAAE,eAAe,CAAC,SAAS;4BAC3C,oBAAoB;yBACrB;qBACF,CAAC;iBACH,EACD,CAAC,MAAM,CAAC,CACT;aACF,CAAC;QACJ,CAAC;KAAA;IAED;;;;OAIG;IACG,mBAAmB,CAAC,QAAmB;;YAC3C,MAAM,YAAY,GAAG,MAAM,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,QAAQ,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;YACzE,OAAO,IAAI,0BAAe,CAAC,IAAI,EAAE,QAAQ,EAAE,YAAY,CAAC,CAAC;QAC3D,CAAC;KAAA;CACF;AAjFD,kCAiFC","sourcesContent":["import type { Provider, TransactionEnvelope } from \"@saberhq/solana-contrib\";\nimport { getOrCreateATA } from \"@saberhq/token-utils\";\nimport type { PublicKey } from \"@solana/web3.js\";\nimport { Keypair, SystemProgram, SYSVAR_CLOCK_PUBKEY } from \"@solana/web3.js\";\n\nimport type { MintWrapperData } from \"../../programs\";\nimport type { MineProgram } from \"../../programs/mine\";\nimport type { QuarrySDK } from \"../../sdk\";\nimport { findRewarderAddress } from \"./pda\";\nimport { RewarderWrapper } from \"./rewarder\";\n\nexport class MineWrapper {\n  constructor(readonly sdk: QuarrySDK) {}\n\n  get provider(): Provider {\n    return this.sdk.provider;\n  }\n\n  get program(): MineProgram {\n    return this.sdk.programs.Mine;\n  }\n\n  async createRewarder({\n    mintWrapper,\n    baseKP = Keypair.generate(),\n    authority = this.program.provider.wallet.publicKey,\n  }: {\n    mintWrapper: PublicKey;\n    baseKP?: Keypair;\n    authority?: PublicKey;\n  }): Promise<{\n    key: PublicKey;\n    tx: TransactionEnvelope;\n  }> {\n    const [rewarderKey, bump] = await findRewarderAddress(\n      baseKP.publicKey,\n      this.program.programId\n    );\n\n    const mintWrapperDataRaw = await this.provider.getAccountInfo(mintWrapper);\n    if (!mintWrapperDataRaw) {\n      throw new Error(\n        `mint wrapper does not exist at ${mintWrapper.toString()}`\n      );\n    }\n\n    const mintWrapperData =\n      this.sdk.programs.MintWrapper.coder.accounts.decode<MintWrapperData>(\n        \"MintWrapper\",\n        mintWrapperDataRaw.accountInfo.data\n      );\n\n    const { address: claimFeeTokenAccount, instruction: createATAInstruction } =\n      await getOrCreateATA({\n        provider: this.provider,\n        mint: mintWrapperData.tokenMint,\n        owner: rewarderKey,\n      });\n\n    return {\n      key: rewarderKey,\n      tx: this.sdk.newTx(\n        [\n          ...(createATAInstruction ? [createATAInstruction] : []),\n          this.program.instruction.newRewarder(bump, {\n            accounts: {\n              base: baseKP.publicKey,\n              authority,\n              rewarder: rewarderKey,\n              payer: this.program.provider.wallet.publicKey,\n              systemProgram: SystemProgram.programId,\n              unusedClock: SYSVAR_CLOCK_PUBKEY,\n              mintWrapper,\n              rewardsTokenMint: mintWrapperData.tokenMint,\n              claimFeeTokenAccount,\n            },\n          }),\n        ],\n        [baseKP]\n      ),\n    };\n  }\n\n  /**\n   * Loads the rewarder wrapper.\n   * @param rewarder\n   * @returns\n   */\n  async loadRewarderWrapper(rewarder: PublicKey): Promise<RewarderWrapper> {\n    const rewarderData = await this.program.account.rewarder.fetch(rewarder);\n    return new RewarderWrapper(this, rewarder, rewarderData);\n  }\n}\n"]}