"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.QuarryWrapper = void 0;
const tslib_1 = require("tslib");
const solana_contrib_1 = require("@saberhq/solana-contrib");
const token_utils_1 = require("@saberhq/token-utils");
const miner_1 = require("./miner");
const payroll_1 = require("./payroll");
const pda_1 = require("./pda");
class QuarryWrapper {
    constructor(sdk, 
    /**
     * The token being staked.
     */
    token, 
    /**
     * The data of the rewarder.
     */
    rewarderData, 
    /**
     * The data of the quarry.
     */
    quarryData, 
    /**
     * The key of the quarry.
     */
    key) {
        this.sdk = sdk;
        this.token = token;
        this.rewarderData = rewarderData;
        this.quarryData = quarryData;
        this.key = key;
    }
    /**
     * The program.
     */
    get program() {
        return this.sdk.programs.Mine;
    }
    /**
     * The provider.
     */
    get provider() {
        return this.sdk.provider;
    }
    /**
     * Loads a quarry
     * @returns
     */
    static load({ sdk, token, key, }) {
        return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {
            const program = sdk.programs.Mine;
            const quarryData = yield program.account.quarry.fetch(key);
            const rewarderData = yield program.account.rewarder.fetch(quarryData.rewarderKey);
            return new QuarryWrapper(sdk, token, rewarderData, quarryData, key);
        });
    }
    /**
     * Get the computed rewards rate of the quarry.
     *
     * This is used for tests, so you probably don't want this.
     * You want quarryData.annualRewardsRate.
     *
     * @returns annualRewardsRate
     */
    computeAnnualRewardsRate() {
        const rewarder = this.rewarderData;
        const totalRewardsShares = rewarder.totalRewardsShares;
        if (totalRewardsShares.isZero()) {
            return new token_utils_1.u64(0);
        }
        const numerator = rewarder.annualRewardsRate.mul(this.quarryData.rewardsShare);
        return numerator.div(totalRewardsShares);
    }
    /**
     * Get the public key of the miner assocaited with the authority account
     * @param authority who owns the miner
     * @returns miner public key
     */
    getMinerAddress(authority) {
        return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {
            const [key] = yield (0, pda_1.findMinerAddress)(this.key, authority, this.program.programId);
            return key;
        });
    }
    /**
     * Get the miner data associated with the authority account
     * @param authority
     * @returns
     */
    getMiner(authority) {
        return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {
            try {
                return yield this.program.account.miner.fetch(yield this.getMinerAddress(authority));
            }
            catch (e) {
                return null;
            }
        });
    }
    /**
     * Get the miner associated with the authority account
     * @param authority
     * @returns
     */
    getMinerActions(authority = this.program.provider.wallet.publicKey) {
        return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {
            const miner = yield this.getMinerAddress(authority);
            const stakedTokenATA = yield (0, token_utils_1.getATAAddress)({
                mint: this.quarryData.tokenMintKey,
                owner: authority,
            });
            const tokenVaultKey = yield (0, token_utils_1.getATAAddress)({
                mint: this.quarryData.tokenMintKey,
                owner: miner,
            });
            return this.createMinerWrapper(authority, miner, tokenVaultKey, stakedTokenATA);
        });
    }
    /**
     * Creates a miner wrapper
     * @param authority
     * @param minerKey
     * @param tokenVaultKey
     * @param stakedTokenATA
     * @returns
     */
    createMinerWrapper(authority, minerKey, tokenVaultKey, stakedTokenATA) {
        return new miner_1.MinerWrapper(this, authority, minerKey, tokenVaultKey, stakedTokenATA);
    }
    /**
     * Sets the rewards share of this mine.
     */
    setRewardsShare(share) {
        return new solana_contrib_1.TransactionEnvelope(this.provider, [
            this.program.instruction.setRewardsShare(share, {
                accounts: {
                    auth: {
                        authority: this.provider.wallet.publicKey,
                        rewarder: this.quarryData.rewarderKey,
                    },
                    quarry: this.key,
                },
            }),
        ]);
    }
    /**
     * Sets the famine timestampe for this mine.
     */
    setFamine(famineTs) {
        return new solana_contrib_1.TransactionEnvelope(this.provider, [
            this.program.instruction.setFamine(famineTs, {
                accounts: {
                    auth: {
                        authority: this.provider.wallet.publicKey,
                        rewarder: this.quarryData.rewarderKey,
                    },
                    quarry: this.key,
                },
            }),
        ]);
    }
    /**
     * Creates the miner of the provided wallet.
     */
    createMiner({ authority = this.program.provider.wallet.publicKey, } = {}) {
        return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {
            const [miner, bump] = yield (0, pda_1.findMinerAddress)(this.key, authority, this.program.programId);
            const { address: minerVault, instruction: createATATX } = yield (0, token_utils_1.getOrCreateATA)({
                provider: this.provider,
                mint: this.quarryData.tokenMintKey,
                owner: miner,
            });
            const stakedTokenATA = yield (0, token_utils_1.getATAAddress)({
                mint: this.quarryData.tokenMintKey,
                owner: authority,
            });
            const wrapper = this.createMinerWrapper(authority, miner, minerVault, stakedTokenATA);
            const result = wrapper.initialize(bump);
            if (createATATX) {
                result.tx.instructions.unshift(createATATX);
            }
            return result;
        });
    }
    /**
     * Payroll helper
     */
    get payroll() {
        const data = this.quarryData;
        return new payroll_1.Payroll(data.famineTs, data.lastUpdateTs, data.annualRewardsRate, data.rewardsPerTokenStored, data.totalTokensDeposited);
    }
}
exports.QuarryWrapper = QuarryWrapper;
//# sourceMappingURL=quarry.js.map